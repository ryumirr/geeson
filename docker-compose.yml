# IMPORTANT: To preserve MySQL data, always use 'docker compose down' without the '-v' flag
# Using 'docker compose down -v' will remove volumes and cause data loss

services:
  mysql:
    image: mysql:8.0.36
    container_name: mysql
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - mysql-net
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "mysql -h localhost -u root -p$$MYSQL_ROOT_PASSWORD -e 'SELECT 1' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
  kafka:
    image: bitnami/kafka:4.0.0
    networks:
      - kafka-net
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_KRAFT_MODE=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,INTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data_2:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:29092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 15s
  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - redis-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
  grpc-server:
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
    build:
      context: ./infra/grpc-server
      dockerfile: ../../Dockerfile
    image: jeongjin984/grpc-server:0.0.1
    container_name: grpc-server
    ports:
      - "6565:6565"
    networks:
      - grpc-net
    volumes:
      - ./logs:/logs

  geeson-commander:
    image: jeongjin984/commander:0.0.1
    ports:
      - "8080:8080"
    depends_on:
      order-api:
        condition: service_started
    networks:
      - api-net
      - grpc-net
    volumes:
      - ./logs:/logs
  order-api:
    image: jeongjin984/order-api:0.0.1
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - api-net
      - kafka-net
      - mysql-net
      - redis-net
      - grpc-net
    volumes:
      - ./logs:/logs
  payment-api:
    image: jeongjin984/payment-api:0.0.1
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - api-net
      - kafka-net
      - mysql-net
      - redis-net
    volumes:
      - ./logs:/logs
  auth-api:
    image: jeongjin984/auth-api:0.0.1
    environment:
      - PORT=8080
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASS=rootpass^^*
      - DB_NAME=user_db
      - JWT_SECRET=change-me-in-production
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - api-net
      - kafka-net
      - mysql-net
      - redis-net
    volumes:
      - ./logs:/app/logs
  inventory-api:
    image: jeongjin984/inventory-api:0.0.1
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - api-net
      - kafka-net
      - mysql-net
      - redis-net
    volumes:
      - ./logs:/logs
  order-saga:
    image: jeongjin984/order-saga:0.0.1
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - api-net
      - kafka-net
      - mysql-net
      - redis-net
    volumes:
      - ./logs:/logs
volumes:
  kafka_data_2:
    driver: local
  mysql_data:
    driver: local
  redis_data:
    driver: local
networks:
  kafka-net:
    driver: bridge
  api-net:
    driver: bridge
  mysql-net:
    driver: bridge
  redis-net:
    driver: bridge
  grpc-net:
    driver: bridge
